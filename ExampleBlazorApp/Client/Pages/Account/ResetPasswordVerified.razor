@page "/account/resetPasswordVerified"
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@if (!passwordResetStatus)
{
    <div class="card">
        <h4 class="card-header">Reset Password</h4>
        <div class="card-body">
            <EditForm Model="@checkModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="checkModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => checkModel.Email)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Continue
                </button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="card">
        <h4 class="card-header">Reset Password</h4>
        <div class="card-body">
            <EditForm Model="@resetModel" OnValidSubmit="OnValidSubmitNewPassword">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="resetModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => resetModel.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="resetModel.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => resetModel.Password)" />
                </div>
                <div class="form-group">
                    <label>Confirm Password</label>
                    <InputText @bind-Value="resetModel.ConfirmPassword" type="password" class="form-control" />
                    <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Reset Password
                </button>
            </EditForm>
        </div>
    </div>
}



@code {
    private Models.Account.CheckPasswordResetRequest checkModel = new();
    private Models.Account.PasswordResetRequestModel resetModel = new();
    private bool loading;
    private bool passwordResetStatus = false;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            passwordResetStatus = await CheckPasswordResetAsync(checkModel.Email);
            if(!passwordResetStatus)
            {
                NavigationManager.NavigateTo("account/login");
            }
            resetModel.Email = checkModel.Email;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        loading = false;
        StateHasChanged();
    }

    private async void OnValidSubmitNewPassword()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            string verificationGuidString = NavigationManager.QueryString("guid");
            PasswordResetRequest resetRequest = new()
            {
                Email = resetModel.Email,
                Password = resetModel.Password,
                Guid = Guid.Parse(verificationGuidString)
            };
            await AccountService.ResetPassword(resetRequest);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        loading = false;
        StateHasChanged();
    }

    private async Task<bool> CheckPasswordResetAsync(string email)
    {
        string verificationGuidString = NavigationManager.QueryString("guid") ?? "";
        if (string.IsNullOrEmpty(verificationGuidString))
            return false;
        if (!Guid.TryParse(verificationGuidString, out Guid parsedGuid))
            return false;

        CheckPasswordResetRequest checkRequest = new()
            {
                Email = email,
                Guid = parsedGuid
            };
        return await AccountService.CheckPasswordReset(checkRequest);
    }
}
